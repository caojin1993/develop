/**
 * 1. 简单数组去重
 * 
 * 示例输入: [1, 3, 1, 2, 3]
 * 
 * 示例输出: [1, 3, 2]
 * 
 * tips: 不使用 Set
 */

console.log('点击上方绿色运行按钮, 右侧输出 console 信息.');

console.log('不需要额外 IDE, 也不需要使用浏览器调试器');

const inputArray = [1, 3, 1, 2, 3];

function unique(input) {
    // code here
    let arr = [];
    for(let i = 0; i < input.length; i++) {
        if(arr.indexOf(input[i])==-1){
            arr.push(input[i])
        }
    }
    return arr;
}

console.log(unique(inputArray));

/**
 * 2. fastEqual
 * 
 * 示例输入: a = { arr: [1, 2], num: 12 } b = { arr: [1, 2], num: 12 }
 * 
 * 示例输出: true
 * 
 * tips: 不需要考虑太多边界情况, e.g. NaN
 * 假定输入 a 和 b 可以是任意数据类型.
 * 假定输入 a 和 b 50%的几率是值相等的.
 */

const a = { arr: [1, 2], num: 2, o: { name: 'foo' }};
const b = { arr: [1, 2], num: 12, o: { name: 'foo' }};

// findType('') => 'string'
// findType(0) => 'number'
// findType(false) => 'boolean'
// findType({}) => 'object'
// findType([]) => 'array'
// ....
function findType(data) {
    return Object.prototype.toString.call(data).split(' ')[1].slice(0, -1).toLowerCase();
}

function fastEqual(a, b) {
    // code here
    if (Object.keys(a).length !== Object.keys(b).length) return false;
    for(let i in a){
        let _typeOfA = findType(a[i]);
        let _typeOfB = findType(b[i]);
        if(_typeOfA !== _typeOfB) return false;
        switch(_typeOfA){
            case 'object':
                let _a = a[i] instanceof Object;
                let _b = b[i] instanceof Object;
                if(_a && _b) return fastEqual(a[i], b[i])
                if(a[i] !== b[i]) return false;
                break;
            case 'array':
                let isEqual = equarArray(a[i], b[i])
                if (!isEqual) return false;
                break;
            case 'string' || 'number' || 'boolean':
                if(a[i] !== b[i]) return false;
                break;
        }

    }
    return true;
}
function equarArray(a, b) {
    if (a.length !== b.length) {
        return false
    } else {
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false
            }
        }
        return true;
    }
}
console.log(fastEqual(a, b));